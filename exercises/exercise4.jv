pipeline DataPipeline {

    DataExtractor
        -> DataInterpreter
        -> DataFilePicker
        -> DataFileInterpreter
        -> DataCSVInterpreter
        -> DataCellRangeSelector
        -> DataColumnDeleter
        -> DataCellWriter
        -> DataTableInterpreter
        -> DataTransformer
        -> DataTableTransformer
        -> DataSqLiteLoader;


    block DataExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block DataInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block DataFilePicker oftype FilePicker {
        path: "./data.csv";
    }

    block DataFileInterpreter oftype TextFileInterpreter { }

    block DataCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block DataCellRangeSelector oftype CellRangeSelector {
        select: range A1:J*;
    }

    block DataColumnDeleter oftype ColumnDeleter {
        delete: [ column F, column G, column H, column I
        ];
    }

    block DataCellWriter oftype CellWriter {
        at: range A1:F1;
        write: [
            "id",
            "producer",
            "model",
            "month",
            "temperature",
            "battery_temperature"
        ];
    }

    block DataTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype valid_ID,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    transform CelsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
    }

    block DataTransformer oftype TableTransformer {
        inputColumns: [
            'temperature'
        ];
        outputColumn: 'temperature';
        uses: CelsiusToFahrenheit;
    }

    block DataTableTransformer oftype TableTransformer {
        inputColumns: [
            'battery_temperature'
        ];
        outputColumn: 'battery_temperature';
        uses: CelsiusToFahrenheit;
    }

    block DataSqLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

constraint Id_RangeConstraint oftype RangeConstraint {
    lowerBound: 0;
}

    valuetype valid_ID oftype integer {
    constraints: [
        Id_RangeConstraint,
    ];
}
